{
	"info": {
		"_postman_id": "c9cd021a-98ad-4003-b62b-1c8c758baf16",
		"name": "API Testing V2",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33058352"
	},
	"item": [
		{
			"name": "Borra todo si hay datos sino error 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 404]);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Devuelve lista vacia",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// Updated schema validation",
							"pm.test(\"Response body is an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"});",
							"",
							"// Added comments to existing tests",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.empty; // Check if response body is empty",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "initialData",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response schema is valid\", function () {",
							"    // No specific schema validation possible for text/plain response",
							"    // Test for successful response without any specific schema validation",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body contains 'OK'\", function () {",
							"    pm.expect(pm.response.text()).to.include('OK');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data/loadInitialData",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data",
						"loadInitialData"
					]
				}
			},
			"response": []
		},
		{
			"name": "Devuelve los datos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Ensure the response body is in JSON format\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"",
							"pm.test(\"Array contains 16 objects, each with 14 attributes\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(20);",
							"    jsonData.forEach((object) => {",
							"        pm.expect(Object.keys(object)).to.have.lengthOf(14);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Crea un dato nuevo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"date\":2022,\n        \"year\":2024,\n        \"month\":9,\n        \"day\":25,\n        \"tone_doc_count\":1.400,\n        \"popularity_rate\":0.1249999999999999,\n        \"tone_avg\":-1.2621819776522465,\n        \"tone_w_avg\":-0.4739113015225997,\n        \"tone_cum\":-0.0163342258012192,\n        \"amd1code\":\"EN\",\n        \"country\":\"Estonia\",\n        \"area\":\"EE\",\n        \"ref_time\":\"day\",\n        \"topic\":\"unemployment\"\n\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Obtiene ese dato creado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Data returned matches the parameters in the URL\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response.country).to.equal(\"Estonia\");\r",
							"    pm.expect(response.year).to.equal(2024);\r",
							"    pm.expect(response.day).to.equal(25);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data/Estonia/2024/25",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data",
						"Estonia",
						"2024",
						"25"
					]
				}
			},
			"response": []
		},
		{
			"name": "Borra ese dato creado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 404]);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response body is in text/plain format\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data/Estonia/2024/25",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data",
						"Estonia",
						"2024",
						"25"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Obtiene array del pais especificado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed syntax\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"// Test to check if the returned data contains the query\r",
							"pm.test(\"Returned data contains the query\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('country', 'Estonia');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data?country=Estonia",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data"
					],
					"query": [
						{
							"key": "country",
							"value": "Estonia"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtiene un dato en especÃ­fico",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Data returned matches the parameters in the URL\", function () {",
							"    var response = pm.response.json();",
							"    pm.expect(response.country).to.equal(\"Estonia\");",
							"    pm.expect(response.year).to.equal(2022);",
							"    pm.expect(response.day).to.equal(29);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data/Estonia/2022/29",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data",
						"Estonia",
						"2022",
						"29"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualiza un dato en concreto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							"",
							"pm.test(\"Response content type is text/plain\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is non-empty\", function () {",
							"    pm.expect(pm.response.text()).to.not.be.empty;",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"date\": 2005,\n        \"year\": 2016,\n        \"month\": 1,\n        \"day\": 10,\n        \"tone_doc_count\": 300,\n        \"popularity_rate\": 0.4242424242424243,\n        \"tone_avg\": -2.094731500463048,\n        \"tone_w_avg\": -3.572465805765719,\n        \"tone_cum\": -1.0339714107787523,\n        \"amd1code\": \"LU\",\n        \"country\": \"Luxembourg\",\n        \"area\": \"LU\",\n        \"ref_time\": \"day\",\n        \"topic\": \"unemployment\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data/Luxembourg/2016/10",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data",
						"Luxembourg",
						"2016",
						"10"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Obtiene ese dato actualizado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Data returned matches the parameters in the URL\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response.country).to.equal(\"Luxembourg\");\r",
							"    pm.expect(response.year).to.equal(2016);\r",
							"    pm.expect(response.day).to.equal(10);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data/Luxembourg/2016/10",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data",
						"Luxembourg",
						"2016",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Borra el dato actualizado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 404]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data/Luxembourg/2016/10",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data",
						"Luxembourg",
						"2016",
						"10"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Paginacion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed syntax errors and updated response time test\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Limit parameter in the response matches the requested limit\r",
							"pm.test(\"Limit parameter in the response matches the requested limit\", function () {\r",
							"    const limitParam = pm.request.url.query.get('limit');\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.length).to.equal(parseInt(limitParam));\r",
							"});\r",
							"\r",
							"// Offset parameter in the response matches the requested offset\r",
							"pm.test(\"Offset parameter in the response matches the requested offset\", function () {\r",
							"    const offsetParam = pm.request.url.query.get('offset');\r",
							"    const responseData1 = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData1.length).to.equal(parseInt(offsetParam));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data?limit=7&offset=7",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data"
					],
					"query": [
						{
							"key": "limit",
							"value": "7"
						},
						{
							"key": "offset",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Datos en un periodo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.include.all.keys(\r",
							"            'date', 'year', 'month', 'day', 'tone_doc_count', \r",
							"            'popularity_rate', 'tone_avg', 'tone_w_avg', 'tone_cum', \r",
							"            'amd1code', 'country', 'area', 'ref_time', 'topic'\r",
							"        );\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Data is within the specified period\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.year).to.be.within(2002, 2016);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data?from=2002&to=2016",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data"
					],
					"query": [
						{
							"key": "from",
							"value": "2002"
						},
						{
							"key": "to",
							"value": "2016"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Id incorrecto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"date\": 2005,\n        \"year\": 2016,\n        \"month\": 1,\n        \"day\": 10,\n        \"tone_doc_count\": 300,\n        \"popularity_rate\": 0.4242424242424243,\n        \"tone_avg\": -2.094731500463048,\n        \"tone_w_avg\": -3.572465805765719,\n        \"tone_cum\": -1.0339714107787523,\n        \"amd1code\": \"LU\",\n        \"country\": \"Luxembourg\",\n        \"area\": \"LU\",\n        \"ref_time\": \"day\",\n        \"topic\": \"unemployment\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data/Luxembourg/2020/10",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data",
						"Luxembourg",
						"2020",
						"10"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Recurso existente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"date\": 2011,\n        \"year\": 2016,\n        \"month\": 1,\n        \"day\": 4,\n        \"tone_doc_count\": 7,\n        \"popularity_rate\": 0.2692307692307692,\n        \"tone_avg\": -0.6958476825206091,\n        \"tone_w_avg\": -0.7273542051605381,\n        \"tone_cum\": -0.1463987228495722,\n        \"amd1code\": \"LU\",\n        \"country\": \"Luxembourg\",\n        \"area\": \"LU\",\n        \"ref_time\": \"day\",\n        \"topic\": \"unemployment\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Datos con campo inesperado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"date\": 2011,\n        \"year\": 2016,\n        \"month\": 1,\n        \"day\": 4,\n        \"tone_doc_count\": 7,\n\n        \"tone_avg\": -0.6958476825206091,\n        \"tone_w_avg\": -0.7273542051605381,\n        \"tone_cum\": -0.1463987228495722,\n        \"amd1code\": \"LU\",\n        \"country\": \"Luxembourg\",\n        \"area\": \"LU\",\n        \"ref_time\": \"day\",\n        \"topic\": \"unemployment\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Datos con campo inesperado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"date\": 2005,\n        \"year\": 2016,\n        \"month\": 1,\n        \"day\": 10,\n        \"tone_doc_count\": 300,\n        \"popularity_rate\": 0.4242424242424243,\n        \"tone_avg\": -2.094731500463048,\n        \"tone_w_avg\": -3.572465805765719,\n        \n        \"amd1code\": \"LU\",\n        \"country\": \"Luxembourg\",\n        \"area\": \"LU\",\n        \"ref_time\": \"day\",\n        \"topic\": \"unemployment\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data/Luxembourg/2016/10",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data",
						"Luxembourg",
						"2016",
						"10"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "recurso inexistente con query",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response body is an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Added comments to existing tests\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.empty; // Check if response body is empty\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data?year=2030",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data"
					],
					"query": [
						{
							"key": "year",
							"value": "2030"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "recurso inexistente con dato concreto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data/Estonia/2010/29",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data",
						"Estonia",
						"2010",
						"29"
					]
				}
			},
			"response": []
		},
		{
			"name": "recurso inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 404]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data/Estonia/2010/29",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data",
						"Estonia",
						"2010",
						"29"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "metodo no permitido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"date\": 2005,\n        \"year\": 2016,\n        \"month\": 1,\n        \"day\": 10,\n        \"tone_doc_count\": 300,\n        \"popularity_rate\": 0.4242424242424243,\n        \"tone_avg\": -2.094731500463048,\n        \"tone_w_avg\": -3.572465805765719,\n        \n        \"amd1code\": \"LU\",\n        \"country\": \"Luxembourg\",\n        \"area\": \"LU\",\n        \"ref_time\": \"day\",\n        \"topic\": \"unemployment\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "metodo no permitido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"date\": 2011,\n        \"year\": 2016,\n        \"month\": 1,\n        \"day\": 4,\n        \"tone_doc_count\": 7,\n        \"popularity_rate\": 0.2692307692307692,\n        \"tone_avg\": -0.6958476825206091,\n        \"tone_w_avg\": -0.7273542051605381,\n        \"tone_cum\": -0.1463987228495722,\n        \"amd1code\": \"LU\",\n        \"country\": \"Luxembourg\",\n        \"area\": \"LU\",\n        \"ref_time\": \"day\",\n        \"topic\": \"unemployment\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data/Luxembourg/2016/10",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data",
						"Luxembourg",
						"2016",
						"10"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Borra todos los datos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 404]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{SERVER}}/api/v2/socioeconomics-traker-using-unconventional-data",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"api",
						"v2",
						"socioeconomics-traker-using-unconventional-data"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}